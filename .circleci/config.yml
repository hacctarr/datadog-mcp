version: 2.1

# Define reusable commands
commands:
  install_uv:
    description: "Install UV package manager"
    steps:
      - run:
          name: Install UV
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            uv --version

  setup_dependencies:
    description: "Install project dependencies"
    steps:
      - run:
          name: Install dependencies
          command: |
            uv sync --frozen
            uv --version

  install_github_cli:
    description: "Install GitHub CLI"
    steps:
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
            gh --version

  validate_semver:
    description: "Validate semantic version format"
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Validate semver format
          command: |
            VERSION="<< parameters.version >>"
            echo "Validating version: $VERSION"
            
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            
            # Validate semver format (MAJOR.MINOR.PATCH with optional pre-release and build metadata)
            if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
              echo "❌ Invalid semver format: $VERSION"
              echo "Expected format: MAJOR.MINOR.PATCH (e.g., 1.0.0, 2.1.3-alpha.1, 1.0.0+build.1)"
              exit 1
            fi
            
            echo "✅ Valid semver format: $VERSION"
            echo "export CLEAN_VERSION=$VERSION" >> $BASH_ENV

  validate_changelog:
    description: "Validate that changelog contains an entry for the specified version"
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Validate changelog entry
          command: |
            VERSION="<< parameters.version >>"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
            
            echo "Checking CHANGELOG.md for version: $VERSION"
            
            # Check if CHANGELOG.md exists
            if [ ! -f CHANGELOG.md ]; then
              echo "❌ CHANGELOG.md not found"
              echo "A changelog is required for releases"
              exit 1
            fi
            
            # Look for version entry in changelog
            # Patterns to match: [v1.0.0], [1.0.0], etc.
            CHANGELOG_PATTERNS=(
              "## \[v$VERSION\]"
              "## \[$VERSION\]"
              "## v$VERSION"
              "## $VERSION"
            )
            
            VERSION_FOUND=false
            for pattern in "${CHANGELOG_PATTERNS[@]}"; do
              if grep -q "$pattern" CHANGELOG.md; then
                VERSION_FOUND=true
                echo "✅ Found changelog entry matching: $pattern"
                break
              fi
            done
            
            if [ "$VERSION_FOUND" = false ]; then
              echo "❌ No changelog entry found for version $VERSION"
              echo ""
              echo "Expected to find one of these patterns in CHANGELOG.md:"
              for pattern in "${CHANGELOG_PATTERNS[@]}"; do
                echo "  - $pattern"
              done
              echo ""
              echo "Current changelog sections:"
              grep "^## " CHANGELOG.md | head -10
              echo ""
              echo "Please add a changelog entry for version $VERSION before releasing."
              exit 1
            fi
            
            # Extract the changelog section to verify it's not empty
            echo "Extracting changelog content for validation..."
            CHANGELOG_CONTENT=$(awk "/^## .*$VERSION.*/{flag=1; next} /^## /{flag=0} flag && /\S/" CHANGELOG.md)
            
            if [ -z "$CHANGELOG_CONTENT" ]; then
              echo "❌ Changelog entry for version $VERSION exists but appears to be empty"
              echo ""
              echo "Please add meaningful content to the changelog entry for version $VERSION"
              echo "Expected sections: Added, Changed, Deprecated, Removed, Fixed, Security"
              exit 1
            fi
            
            echo "✅ Changelog validation passed"
            echo "📝 Preview of changelog content:"
            echo "$CHANGELOG_CONTENT" | head -20
            
            # Check if this is marked as [Unreleased]
            if grep -q "## \[Unreleased\]" CHANGELOG.md && echo "$CHANGELOG_CONTENT" | grep -q "Unreleased"; then
              echo ""
              echo "⚠️  WARNING: Found [Unreleased] section in changelog"
              echo "   Consider updating [Unreleased] to [$VERSION] before release"
              echo "   This is not blocking the release, but recommended for clarity"
            fi

  detect_new_version_for_auto_release:
    description: "Detect if changelog contains a new version that doesn't exist as a GitHub tag"
    steps:
      - run:
          name: Detect new version for auto-release
          command: |
            echo "🔍 Checking for new versions in changelog that need auto-release..."
            
            # Check if CHANGELOG.md exists
            if [ ! -f CHANGELOG.md ]; then
              echo "📝 No CHANGELOG.md found, skipping auto-release detection"
              echo "export AUTO_RELEASE_NEEDED=false" >> $BASH_ENV
              exit 0
            fi
            
            # Extract the first non-Unreleased version from changelog
            LATEST_CHANGELOG_VERSION=$(grep "^## \[" CHANGELOG.md | grep -v "Unreleased" | head -1 | sed -E 's/^## \[v?([^]]*)\].*/\1/')
            
            if [ -z "$LATEST_CHANGELOG_VERSION" ]; then
              echo "📝 No versioned entries found in changelog"
              echo "export AUTO_RELEASE_NEEDED=false" >> $BASH_ENV
              exit 0
            fi
            
            echo "📋 Latest version in changelog: $LATEST_CHANGELOG_VERSION"
            
            # Clean version (remove v prefix if present)
            CLEAN_VERSION=${LATEST_CHANGELOG_VERSION#v}
            TAG_NAME="v$CLEAN_VERSION"
            
            # Check if this tag exists on GitHub
            echo "🏷️  Checking if tag $TAG_NAME exists on GitHub..."
            
            # Use git ls-remote to check if tag exists without needing authentication
            if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
              echo "✅ Tag $TAG_NAME already exists on GitHub"
              echo "export AUTO_RELEASE_NEEDED=false" >> $BASH_ENV
            else
              echo "🆕 Tag $TAG_NAME does not exist on GitHub"
              echo "🚀 Auto-release needed for version: $CLEAN_VERSION"
              
              # Validate this is a proper semver before proceeding (basic validation)
              if [[ $CLEAN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "✅ Version $CLEAN_VERSION is valid semver"
                echo "export AUTO_RELEASE_NEEDED=true" >> $BASH_ENV
                echo "export AUTO_RELEASE_VERSION=$CLEAN_VERSION" >> $BASH_ENV
                echo "export AUTO_RELEASE_TAG=$TAG_NAME" >> $BASH_ENV
              else
                echo "❌ Version $CLEAN_VERSION is not valid semver, skipping auto-release"
                echo "export AUTO_RELEASE_NEEDED=false" >> $BASH_ENV
              fi
            fi
            
            # Show summary
            echo ""
            echo "📊 Auto-release detection summary:"
            echo "   Latest changelog version: $LATEST_CHANGELOG_VERSION"
            echo "   Clean version: $CLEAN_VERSION"
            echo "   Expected tag: $TAG_NAME"
            echo "   Auto-release needed: ${AUTO_RELEASE_NEEDED:-false}"

# Define jobs
jobs:
  syntax_check:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - setup_dependencies
      - run:
          name: Check Python syntax
          command: |
            echo "Checking syntax for all Python files..."
            python -m py_compile datadog_mcp/server.py
            python -m py_compile datadog_mcp/tools/*.py
            python -m py_compile datadog_mcp/utils/*.py
            echo "✅ All Python files have valid syntax"

  package_structure_test:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - setup_dependencies
      - run:
          name: Test package structure
          command: |
            echo "Testing package imports..."
            python -c "from datadog_mcp.server import cli_main; print('✅ Main entry point imports successfully')"
            python -c "from datadog_mcp.tools import get_metrics; print('✅ Tools import successfully')"
            python -c "from datadog_mcp.utils import datadog_client; print('✅ Utils import successfully')"
            echo "✅ Package structure is valid"

  uvx_installation_test:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - run:
          name: Test UVX installation from local package
          command: |
            echo "Testing UVX installation..."
            # Test package can be built and installed
            uvx --from . datadog-mcp --help 2>&1 || echo "Expected: MCP server doesn't have --help flag"
            echo "✅ UVX installation test completed"

  lint_check:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - setup_dependencies
      - run:
          name: Run basic linting
          command: |
            echo "Running basic Python checks..."
            # Check for basic Python issues
            python -m py_compile datadog_mcp/__init__.py
            python -m py_compile datadog_mcp/tools/__init__.py
            python -m py_compile datadog_mcp/utils/__init__.py
            echo "✅ Basic linting passed"

  configuration_validation:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - setup_dependencies
      - run:
          name: Validate project configuration
          command: |
            echo "Validating pyproject.toml..."
            uv tree
            echo "✅ Project configuration is valid"
      - run:
          name: Check entry points
          command: |
            echo "Checking console script entry points..."
            python -c "
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                config = tomllib.load(f)
            scripts = config.get('project', {}).get('scripts', {})
            assert 'datadog-mcp' in scripts, 'datadog-mcp entry point not found'
            print('✅ Entry points configured correctly')
            "

  documentation_check:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - run:
          name: Check documentation files
          command: |
            echo "Checking documentation files..."
            test -f README.md || (echo "❌ README.md missing" && exit 1)
            test -f CHANGELOG.md || (echo "❌ CHANGELOG.md missing" && exit 1)
            test -f CLAUDE.md || (echo "❌ CLAUDE.md missing" && exit 1)
            echo "✅ All documentation files present"
      - run:
          name: Validate README content
          command: |
            echo "Checking README content..."
            grep -q "datadog-mcp" README.md || (echo "❌ Package name not found in README" && exit 1)
            grep -q "uvx --from git+" README.md || (echo "❌ UVX installation instructions not found" && exit 1)
            echo "✅ README content validated"

  auto_release_detection:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - detect_new_version_for_auto_release
      - run:
          name: Report auto-release decision
          command: |
            if [ "${AUTO_RELEASE_NEEDED:-false}" = "true" ]; then
              echo "🚀 AUTO-RELEASE TRIGGERED"
              echo "   Version: $AUTO_RELEASE_VERSION"
              echo "   Tag: $AUTO_RELEASE_TAG"
              echo ""
              echo "This will trigger an automatic release workflow."
            else
              echo "✅ No auto-release needed"
              echo "   Either no new versions in changelog or tags already exist"
            fi

  release:
    docker:
      - image: cimg/python:3.13
    parameters:
      release_version:
        type: string
        description: "Release version (semver format, e.g., 1.0.0 or v1.0.0)"
    steps:
      - checkout
      - install_uv
      - install_github_cli
      - validate_semver:
          version: << parameters.release_version >>
      - validate_changelog:
          version: << parameters.release_version >>
      - setup_dependencies
      - run:
          name: Update version in pyproject.toml
          command: |
            echo "Updating version to: $CLEAN_VERSION"
            # Update version in pyproject.toml
            sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml
            echo "✅ Updated pyproject.toml version to $CLEAN_VERSION"
            
            # Verify the change
            grep "version = " pyproject.toml
      - run:
          name: Build packages
          command: |
            echo "Building Python packages..."
            uv build
            
            # List built packages
            echo "Built packages:"
            ls -la dist/
            
            # Verify packages were created
            if [ ! -f dist/*.tar.gz ] || [ ! -f dist/*.whl ]; then
              echo "❌ Package build failed - missing distribution files"
              exit 1
            fi
            
            echo "✅ Packages built successfully"
      - run:
          name: Run pre-release tests
          command: |
            echo "Running pre-release validation tests..."
            
            # Test syntax one more time
            python -m py_compile datadog_mcp/server.py
            python -m py_compile datadog_mcp/tools/*.py
            python -m py_compile datadog_mcp/utils/*.py
            
            # Test package installation from built wheel
            WHEEL_FILE=$(ls dist/*.whl | head -1)
            echo "Testing installation of: $WHEEL_FILE"
            uvx --from "$WHEEL_FILE" datadog-mcp --help 2>&1 || echo "Expected: MCP server doesn't have --help"
            
            echo "✅ Pre-release tests passed"
      - run:
          name: Create Git tag
          command: |
            # Configure git
            git config user.email "ci@circleci.com"
            git config user.name "CircleCI Release Bot"
            
            # Create tag with v prefix
            TAG_NAME="v$CLEAN_VERSION"
            echo "Creating git tag: $TAG_NAME"
            
            # Check if tag already exists
            if git tag -l | grep -q "^$TAG_NAME$"; then
              echo "❌ Tag $TAG_NAME already exists"
              exit 1
            fi
            
            # Commit version update
            git add pyproject.toml
            git commit -m "Release $TAG_NAME

            - Update version to $CLEAN_VERSION
            - Built and tested packages
            - Ready for release
            
            🤖 Generated by CircleCI Release Pipeline"
            
            # Create annotated tag
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME

            See CHANGELOG.md for details about this release.
            
            Packages built and tested in CI.
            🤖 Released via CircleCI"
            
            # Push tag and commit
            git push origin main
            git push origin "$TAG_NAME"
            
            echo "✅ Created and pushed tag: $TAG_NAME"
            echo "export TAG_NAME=$TAG_NAME" >> $BASH_ENV
      - run:
          name: Create GitHub Release
          command: |
            echo "Creating GitHub release for tag: $TAG_NAME"
            
            # Extract changelog for this version (if available)
            CHANGELOG_SECTION=""
            if [ -f CHANGELOG.md ]; then
              echo "Extracting changelog section..."
              # Try to extract changelog section for this version
              CHANGELOG_SECTION=$(awk "/^## \[.*$CLEAN_VERSION.*\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "")
            fi
            
            # Create release notes
            RELEASE_NOTES="# Release $TAG_NAME

            This release was automatically built and published by CircleCI.

            ## Installation

            **UVX (Recommended):**
            \`\`\`bash
            uvx --from git+https://github.com/shelfio/datadog-mcp.git@$TAG_NAME datadog-mcp
            \`\`\`

            **Development:**
            \`\`\`bash
            git clone https://github.com/shelfio/datadog-mcp.git
            cd datadog-mcp
            git checkout $TAG_NAME
            uv sync && uv run ddmcp/server.py
            \`\`\`

            ## Package Files

            The following package files are attached to this release:
            - \`datadog_mcp-$CLEAN_VERSION.tar.gz\` - Source distribution
            - \`datadog_mcp-$CLEAN_VERSION-py3-none-any.whl\` - Python wheel

            ## Changes

            $CHANGELOG_SECTION

            ---
            🤖 Automated release created by CircleCI"
            
            # Create release using GitHub CLI
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "$RELEASE_NOTES" \
              --target main \
              dist/*
            
            echo "✅ GitHub release created: $TAG_NAME"
            echo "📦 Packages uploaded to release"
      - run:
          name: Release Summary
          command: |
            echo "🎉 Release completed successfully!"
            echo ""
            echo "📋 Release Summary:"
            echo "  Version: $CLEAN_VERSION"
            echo "  Tag: $TAG_NAME"
            echo "  Packages: $(ls dist/ | tr '\n' ' ')"
            echo ""
            echo "🔗 GitHub Release: https://github.com/shelfio/datadog-mcp/releases/tag/$TAG_NAME"
            echo ""
            echo "📥 Install with UVX:"
            echo "  uvx --from git+https://github.com/shelfio/datadog-mcp.git@$TAG_NAME datadog-mcp"

  auto_release:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - install_uv
      - install_github_cli
      - detect_new_version_for_auto_release
      - run:
          name: Check if auto-release is needed
          command: |
            if [ "${AUTO_RELEASE_NEEDED:-false}" != "true" ]; then
              echo "❌ Auto-release not needed, stopping job"
              circleci-agent step halt
            fi
            
            echo "✅ Auto-release confirmed for version: $AUTO_RELEASE_VERSION"
            echo "export CLEAN_VERSION=$AUTO_RELEASE_VERSION" >> $BASH_ENV
      - run:
          name: Validate changelog for auto-release version
          command: |
            echo "Validating changelog for version: $AUTO_RELEASE_VERSION"
            # Use the validate_changelog logic inline since we can't pass variable to command parameter
            VERSION="$AUTO_RELEASE_VERSION"
            VERSION=${VERSION#v}
            
            echo "Checking CHANGELOG.md for version: $VERSION"
            
            if [ ! -f CHANGELOG.md ]; then
              echo "❌ CHANGELOG.md not found"
              exit 1
            fi
            
            CHANGELOG_PATTERNS=(
              "## \[v$VERSION\]"
              "## \[$VERSION\]"
              "## v$VERSION"
              "## $VERSION"
            )
            
            VERSION_FOUND=false
            for pattern in "${CHANGELOG_PATTERNS[@]}"; do
              if grep -q "$pattern" CHANGELOG.md; then
                VERSION_FOUND=true
                echo "✅ Found changelog entry matching: $pattern"
                break
              fi
            done
            
            if [ "$VERSION_FOUND" = false ]; then
              echo "❌ No changelog entry found for version $VERSION"
              exit 1
            fi
            
            echo "✅ Changelog validation passed"
      - setup_dependencies
      - run:
          name: Update version in pyproject.toml
          command: |
            echo "🔄 Updating version to: $CLEAN_VERSION"
            # Update version in pyproject.toml
            sed -i "s/version = \".*\"/version = \"$CLEAN_VERSION\"/" pyproject.toml
            echo "✅ Updated pyproject.toml version to $CLEAN_VERSION"
            
            # Verify the change
            grep "version = " pyproject.toml
      - run:
          name: Build packages
          command: |
            echo "📦 Building Python packages..."
            uv build
            
            # List built packages
            echo "Built packages:"
            ls -la dist/
            
            # Verify packages were created
            if [ ! -f dist/*.tar.gz ] || [ ! -f dist/*.whl ]; then
              echo "❌ Package build failed - missing distribution files"
              exit 1
            fi
            
            echo "✅ Packages built successfully"
      - run:
          name: Run pre-release tests
          command: |
            echo "🧪 Running pre-release validation tests..."
            
            # Test syntax one more time
            python -m py_compile datadog_mcp/server.py
            python -m py_compile datadog_mcp/tools/*.py
            python -m py_compile datadog_mcp/utils/*.py
            
            # Test package installation from built wheel
            WHEEL_FILE=$(ls dist/*.whl | head -1)
            echo "Testing installation of: $WHEEL_FILE"
            uvx --from "$WHEEL_FILE" datadog-mcp --help 2>&1 || echo "Expected: MCP server doesn't have --help"
            
            echo "✅ Pre-release tests passed"
      - run:
          name: Create Git tag
          command: |
            # Configure git
            git config user.email "ci@circleci.com"
            git config user.name "CircleCI Auto-Release Bot"
            
            # Create tag with v prefix
            TAG_NAME="v$CLEAN_VERSION"
            echo "🏷️  Creating git tag: $TAG_NAME"
            
            # Double-check if tag already exists (safety check)
            if git tag -l | grep -q "^$TAG_NAME$"; then
              echo "❌ Tag $TAG_NAME already exists, aborting"
              exit 1
            fi
            
            # Commit version update
            git add pyproject.toml
            git commit -m "Auto-release $TAG_NAME

            - Detected new version in CHANGELOG.md
            - Updated version to $CLEAN_VERSION
            - Built and tested packages automatically
            
            🤖 Automated release triggered by changelog update"
            
            # Create annotated tag
            git tag -a "$TAG_NAME" -m "Auto-release $TAG_NAME

            This release was automatically triggered when a new version
            entry was detected in CHANGELOG.md.
            
            See CHANGELOG.md for details about this release.
            🤖 Auto-released via CircleCI"
            
            # Push tag and commit
            git push origin main
            git push origin "$TAG_NAME"
            
            echo "✅ Created and pushed tag: $TAG_NAME"
            echo "export TAG_NAME=$TAG_NAME" >> $BASH_ENV
      - run:
          name: Create GitHub Release
          command: |
            echo "🚀 Creating GitHub release for tag: $TAG_NAME"
            
            # Extract changelog for this version
            CHANGELOG_SECTION=""
            if [ -f CHANGELOG.md ]; then
              echo "Extracting changelog section..."
              CHANGELOG_SECTION=$(awk "/^## .*$CLEAN_VERSION.*/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md || echo "")
            fi
            
            # Create release notes
            RELEASE_NOTES="# Auto-Release $TAG_NAME

            🤖 This release was automatically triggered when a new version entry was detected in CHANGELOG.md.

            ## Installation

            **UVX (Recommended):**
            \`\`\`bash
            uvx --from git+https://github.com/shelfio/datadog-mcp.git@$TAG_NAME datadog-mcp
            \`\`\`

            **Development:**
            \`\`\`bash
            git clone https://github.com/shelfio/datadog-mcp.git
            cd datadog-mcp
            git checkout $TAG_NAME
            uv sync && uv run ddmcp/server.py
            \`\`\`

            ## Package Files

            The following package files are attached to this release:
            - \`datadog_mcp-$CLEAN_VERSION.tar.gz\` - Source distribution
            - \`datadog_mcp-$CLEAN_VERSION-py3-none-any.whl\` - Python wheel

            ## Changes

            $CHANGELOG_SECTION

            ---
            🤖 Automated release created by CircleCI Auto-Release"
            
            # Create release using GitHub CLI
            gh release create "$TAG_NAME" \
              --title "Auto-Release $TAG_NAME" \
              --notes "$RELEASE_NOTES" \
              --target main \
              dist/*
            
            echo "✅ GitHub release created: $TAG_NAME"
            echo "📦 Packages uploaded to release"
      - run:
          name: Auto-Release Summary
          command: |
            echo "🎉 Auto-release completed successfully!"
            echo ""
            echo "📋 Auto-Release Summary:"
            echo "  Trigger: Changelog entry detected"
            echo "  Version: $CLEAN_VERSION"
            echo "  Tag: $TAG_NAME"
            echo "  Packages: $(ls dist/ | tr '\n' ' ')"
            echo ""
            echo "🔗 GitHub Release: https://github.com/shelfio/datadog-mcp/releases/tag/$TAG_NAME"
            echo ""
            echo "📥 Install with UVX:"
            echo "  uvx --from git+https://github.com/shelfio/datadog-mcp.git@$TAG_NAME datadog-mcp"

# Pipeline parameters for manual triggers
parameters:
  run_release:
    type: boolean
    default: false
  release_version:
    type: string
    default: "0.0.1"

# Define workflows

workflows:
  # Regular CI workflows
  test_pull_requests:
    when:
      not: << pipeline.parameters.run_release >>
    jobs:
      - syntax_check:
          filters:
            branches:
              ignore: main
      - package_structure_test:
          filters:
            branches:
              ignore: main
      - uvx_installation_test:
          filters:
            branches:
              ignore: main
          requires:
            - syntax_check
      - lint_check:
          filters:
            branches:
              ignore: main
      - configuration_validation:
          filters:
            branches:
              ignore: main
      - documentation_check:
          filters:
            branches:
              ignore: main

  test_main_branch:
    when:
      not: << pipeline.parameters.run_release >>
    jobs:
      - syntax_check:
          filters:
            branches:
              only: main
      - package_structure_test:
          filters:
            branches:
              only: main
      - uvx_installation_test:
          filters:
            branches:
              only: main
          requires:
            - syntax_check
      - lint_check:
          filters:
            branches:
              only: main
      - configuration_validation:
          filters:
            branches:
              only: main
      - documentation_check:
          filters:
            branches:
              only: main
      # Auto-release detection and conditional release
      - auto_release_detection:
          filters:
            branches:
              only: main
          requires:
            - syntax_check
            - package_structure_test
            - lint_check
            - configuration_validation
            - documentation_check
      - auto_release:
          filters:
            branches:
              only: main
          requires:
            - auto_release_detection

  # Manual release workflow
  release_workflow:
    when: << pipeline.parameters.run_release >>
    jobs:
      - release:
          release_version: << pipeline.parameters.release_version >>
          filters:
            branches:
              only: main